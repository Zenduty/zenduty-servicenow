<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>true</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>incident</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>ServiceNow Incident Alert Business Rule</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[function customHash(payload, secret) {
    let hash = 0;
    const maxLen = Math.max(payload.length, secret.length);

    for (let i = 0; i < maxLen; i++) {
        const p = i < payload.length ? payload.charCodeAt(i) : 0;
        const s = i < secret.length ? secret.charCodeAt(i) : 0;
        hash = ((hash << 5) - hash) + (p ^ s); // Simple hash combiner
        hash |= 0; // Convert to 32-bit integer
    }
    // Convert to unsigned and to hex string for consistency
    return (hash >>> 0).toString(16);
}

(function executeRule(current, previous) {
	gs.info("I am in to Not triggering the create busuness rule because incident is created by zenduty");
    try {
		// Skip outbound integration to Zenduty
		if (current.operation() == 'insert' && current.u_originated_from == 'zenduty') {
			gs.info("Not triggering the create busuness rule because incident is created by zenduty");
			return;
		}

		// Initialize the payload object
        var payload = {};

        // Use getElements() to retrieve all fields
        var elements = current.getElements();
        for (var i = 0; i < elements.length; i++) {
            var fieldName = elements[i].getName();
            payload[fieldName] = current.getValue(fieldName);
        }

        // Add the action field to the payload
        payload.action = current.operation();

		// Add incident state sys_id if it's a reference field
		var choiceGR = new GlideRecord('sys_choice');
		choiceGR.addQuery('name', 'incident');
		choiceGR.addQuery('element', 'state');
		choiceGR.addQuery('value', current.getValue('state'));
		choiceGR.query();
		if (choiceGR.next()) {
			payload.snow_incident_state_sys_id = choiceGR.sys_id.toString();
		}
		else{
			payload.snow_incident_state_sys_id = null;
		}

		// Add incident urgency sys_id if it's a reference field
		var urgencyGR = new GlideRecord('sys_choice');
		urgencyGR.addQuery('name', 'task');
		urgencyGR.addQuery('element', 'urgency');
		urgencyGR.addQuery('value', current.getValue('urgency'));
		urgencyGR.query();
		if (urgencyGR.next()) {
			payload.snow_incident_urgency_sys_id = urgencyGR.sys_id.toString();
		}
		else{
			payload.snow_incident_urgency_sys_id = null;
		}

		// Add incident priority sys_id if it's a reference field
		var priorityGR = new GlideRecord('sys_choice');
		priorityGR.addQuery('name', 'task');
		priorityGR.addQuery('element', 'priority');
		priorityGR.addQuery('value', current.getValue('priority'));
		priorityGR.query();
		if (priorityGR.next()) {
			payload.snow_incident_priority_sys_id = priorityGR.sys_id.toString();
			payload.snow_incident_priority_label = priorityGR.getDisplayValue('label');
		} else {
			payload.snow_incident_priority_sys_id = null;
		}

        // Convert the payload object to a JSON string
        var payloadStr = JSON.stringify(payload);

		var signature = customHash(payloadStr, gs.getCurrentScopeName());
		
        var r = new sn_ws.RESTMessageV2('ServiceNow Event', 'ServiceNow Incident Alert');
		r.setStringParameterNoEscape('service_now_instance_identifier', gs.getProperty('instance_name'));
        r.setRequestHeader("Content-Type", "application/json");
		r.setRequestHeader("X-Zenduty-Signature", signature);
        r.setRequestBody(payloadStr);
        r.executeAsync(); // Asynchronous call

        gs.info("ServiceNow Alert Business Rule Async REST call sent");

    } catch (err) {
        gs.error("ServiceNow Alert Business Rule Async REST call failed: " + err.message);
    }
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-07-24 12:33:58</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>2e13617383b62210b474b755eeaad381</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>ServiceNow Incident Alert Business Rule</sys_name>
        <sys_overrides/>
        <sys_package display_value="Zenduty" source="x_1072151_zenduty">99b1a1ff83762210b474b755eeaad3d0</sys_package>
        <sys_policy/>
        <sys_scope display_value="Zenduty">99b1a1ff83762210b474b755eeaad3d0</sys_scope>
        <sys_update_name>sys_script_2e13617383b62210b474b755eeaad381</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-07-24 12:35:37</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=2e13617383b62210b474b755eeaad381"/>
</record_update>
