<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json,application/xml,text/xml</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri/>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>POST</http_method>
        <name>Update Incident Status</name>
        <operation_script><![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
    try {
        var body = request.body.data;

        // Validate required fields
        if (!body || !body.sys_id || !body.state || !body.urgency || !body.mandatory_fields) {
            response.setStatus(400);
            return {
                status: "error",
                message: "Missing required fields: sys_id and state or urgency or mandatory_fields"
            };
        }

        // Get the incident by sys_id
        var incidentGR = new GlideRecord('incident');
        if (!incidentGR.get(body.sys_id)) {
            response.setStatus(404);
            return {
                status: "error",
                message: "Incident not found with sys_id: " + body.sys_id
            };
        }

		// Get state by sys_id
		var choiceGR = new GlideRecord('sys_choice');
		choiceGR.addQuery('name', 'incident');
		choiceGR.addQuery('element', 'state');
		choiceGR.addQuery('sys_id', body.state);
		choiceGR.query();
		if (!choiceGR.next()) {
            response.setStatus(404);
            return {
                status: "error",
                message: "Incident state not found with sys_id: " + body.state
            };
        }

		// Get urgency by sys_id
		var urgencyGR = new GlideRecord('sys_choice');
		urgencyGR.addQuery('name', 'task');
		urgencyGR.addQuery('element', 'urgency');
		urgencyGR.addQuery('sys_id', body.urgency);
		urgencyGR.query();
		if (!urgencyGR.next()) {
            response.setStatus(404);
            return {
                status: "error",
                message: "Incident urgency not found with sys_id: " + body.urgency
            };
        }

		// Get priority by sys_id
		var snowPriority = null;
		if (body.priority){
			var priorityGR = new GlideRecord('sys_choice');
			priorityGR.addQuery('sys_id', body.priority);
			priorityGR.query();
			if (priorityGR.next()) {
				snowPriority = priorityGR.value;
			}
		}

		// set mandatory fields
		for(let field in body.mandatory_fields){
			let value = body.mandatory_fields[field];
			incidentGR.setValue(field, value);
		}

        // Update the state
		incidentGR.setValue("state", choiceGR.value);

		incidentGR.setValue("urgency", urgencyGR.value);

		if (snowPriority){
			incidentGR.priority = snowPriority;
		}
		
		incidentGR.update();

		gs.info("Incident updated successfully");
        response.setStatus(200);
        return {
            status: "success",
            message: "Incident updated successfully",
            number: incidentGR.number.toString(),
            new_state: incidentGR.state.toString(),
            sys_id: incidentGR.getUniqueValue()
        };

    } catch (err) {
		gs.info("Incident not updated successfully error: " + err.message);
        response.setStatus(400);
        return {
            status: "error",
            message: "Unexpected error occurred",
            details: err.message
        };
    }
})(request, response);
]]></operation_script>
        <operation_uri>/api/x_1072151_zenduty/zenduty_alerts/update_incident_status</operation_uri>
        <produces>application/json,application/xml,text/xml</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/update_incident_status</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-07-24 12:39:23</sys_created_on>
        <sys_id>ee74adb383b62210b474b755eeaad318</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Update Incident Status</sys_name>
        <sys_package display_value="Zenduty" source="x_1072151_zenduty">99b1a1ff83762210b474b755eeaad3d0</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="Zenduty">99b1a1ff83762210b474b755eeaad3d0</sys_scope>
        <sys_update_name>sys_ws_operation_ee74adb383b62210b474b755eeaad318</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-07-24 12:39:23</sys_updated_on>
        <web_service_definition display_value="Zenduty Alerts">ecf325b383b62210b474b755eeaad362</web_service_definition>
        <web_service_version/>
    </sys_ws_operation>
</record_update>
